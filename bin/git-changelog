#!/usr/bin/env ruby -wKU
require 'optparse'
require 'versionomy'

def error(msg)
  STDERR.puts "[E]\t#{msg}"
  exit 1
end

def assert_is_git_repo
  error "Not a git repository" unless is_git_repo?
end

def is_git_repo?
  File.directory?('.git')
end

 # e.g. v1.4.3
def valid_version_regexp
  /^v?\d+\.\d+/
end

def git(*args)
  out = `git #{args.join(' ')}`
  raise "Failed git command" unless $?.success?
  out
end

# Find all version tags
def get_tags
  %x{git tag}.split.grep(valid_version_regexp).map{|tag| Versionomy.parse(tag)}.sort.reverse.map{|t| t.to_s}
end

def annotate!(options)
  limit = options[:limit] || 20

  assert_is_git_repo
  tags = get_tags

  error "No version tags available." if tags.empty?

  first = tags.index(options[:to]) || 0
  last  = tags.index(options[:from]) || tags.size
  
  tags[first..last].each_with_index do |start, i|
    finish = tags[i+1]
    range = ''
    range << "refs/tags/#{finish}.." if finish # log until end tag if there is an end tag
    range << "refs/tags/#{start}"
    log = git(%{log --no-merges --pretty=format:"%h  %s" #{range}}).strip.split("\n")
    next if log.empty?
    puts "#{start}"
    puts "=" * start.length
    puts limit ? log[0,limit] : log
    puts "         ... and #{log.size - limit} more." if limit && log.size > limit
    puts
  end
end

options = {}
OptionParser.new do |opts|
  opts.banner = "git changelog - Show a list of changes by version."
  
  opts.separator ''
  
  opts.on_tail('-h', '--help', 'Displays this help message') do
    puts opts
    exit
  end
  
  opts.on_tail("--version", "Show version") do
    puts 'git changelog version ' + QaReleaseTasks.version
    exit
  end

  opts.on('-l', '--limit [LIMIT]', Integer, 'Maximum commits for each version, default is 20') do |limit|
    options[:limit] = limit || 20
  end
  
  opts.on('--no-limit', 'Show all commits for each version') do
    options[:limit] = false
  end
  
  opts.on('--from [VERSION]',
          'Start changelog at this version. Defaults to first version.') do |from|
    options[:from] = from
  end
  
  opts.on('--to [VERSION]',
          'End changelog at this version. Defaults to most recent version.') do |to|
    options[:to] = to
  end
end.parse!

annotate!(options)
